             
12/23/2024

 //************************************//
 . link :- The three links states are:

            a:visited --> a link the user has visited.
            a:hover --> a link when the user mouses over it.
            a:active --> a link the moment it is clicked.


//*************************************************//
 . box-shadow => used to give a shadow to a box.
                 box-shadow: 0 0 10px 30px yellow; (horizontal offset, vertical Offset, blur, spread, color).


//**************************************************//
. display property =>  The display property is used to specify how an element is shown on a web page.

       
                       1. Block-level Elements :- A block-level element ALWAYS starts on a new line and takes up the full width available ,
                          <div> ,<h1> - <h> ,<p> ,<form> ,<header>, <footer> ,<section> 
                     
                       2. An inline element DOES NOT start on a new line and only takes up as much width as necessary.  
                            <span> ,<a>, <img>.
 
                       3. Inline-block	Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply                           height and width values.
                       4. flex ==> aage hai
                       5. grid => aage hai

                    
              Difference between display:none and visiblity: hidden ==>

             visibility:hidden hides the element, but it still takes up space in the layout.
             display:none removes the element from the document. It does not take up any space.


 
   //********************************************************//
 . Position property :- the position property sets how an element is positioned in a document.
      
                        . Static => default property (top, right, bottom, left, and z-index property have no effect)
                        . relative => element is relative to itself.(top, right, bottom, left, and z-index will work).
                        . absolute => position relative to its closest ancestor.(removed from flow).
                         . fixed => positioned relative to browser.(removed from flow).
                        . sticky => positioned based on user scroll positon.


 
  //********************************************************//
 . overflow =>  the overflow property in css used to control how content overflow, its containing elements when it doesn't fit within the available space.
           
               1. overflow visible;(default).
               2. overflow: hidden;
               3. overflow: scroll;
               4. overflow: auto;.
                  difference between overflow scroll and auto : overflow scroll me dono side scroll aata hn horizontal and vertical but overflow auto me jis side need                   hoti hn vhi aata hn .


  //****************************************************//
 . pseudo Elements :- A CSS pseudo-element is used to style specific parts of an element. 
 
                     1. ::before => the ::pseudo-element is used to insert content before the content of an element.
                     2. ::after => the ::after-element is used to insert content after the content of an element.
                     3. ::first-letter => used for first letter.
                     4. ::first-line  => used for first line.
                     5. ::selection   => The ::selection pseudo-element matches the portion of an element that is selected by a user.The following CSS properties can                                          be applied to ::selection: color, background, cursor, and outline.


    //*************************************************//
   . pseudo classes :- A pseudo-class is used to define a special state of an element.
 
                      1. link => this is the default state of an universal link.
                      2. visited(a:visited) => this state applies to a link thar the user has already visited.
                      3.hover(a:hover) => this state triggers when the user hover their mouse pointer over a line.
                      4. active (a:active) => this state is trigered when the user clicks on a link.
                      5. :first-child  => select the first child element of its parent.
                      6. :last-child => select the last child of its parent.
                      7.  :nth-child(n) => selects elements based on their position within a parent element , where 'n' is a numeric value.



  //************************************//
  . CSS Gradients :-  CSS gradients let you display smooth transitions between two or more specified colors.

                       CSS defines three types of gradients:
                         1. Linear Gradients (goes down/up/left/right/diagonally). ==> background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
                         2. Radial Gradients (defined by their center). ==> background-image: radial-gradient(shape size at position, start-color, ..., last-color); 
                         3. Conic Gradients (rotated around a center point).



  //**************************************//
  . flex box => Flexbox is a layout method for arranging items in rows or columns.
 
               A flexbox always consists of:
                 --> a Flex Container - the parent (container) <div> element
                 --> Flex Items - the items inside the container <div>



               The CSS properties we use for the flex container are:-...............
                flex-direction, flex-wrap, flex-flow, justify-content, align-items
 

                 1. flex-direction :- The flex-direction property specifies the display-direction of flex items in the flex container.
                                         prperty =>  row, column, row-reverse, column-reverse.

                 2. flex-wrap :- The flex-wrap property specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line.
                                    property => nowrap, wrap, wrap-reverse.

                 3. flex-flow :-The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.
                                    property =>  flex-flow: row wrap;

                 4. justify-content :- The justify-content property is used to align the flex items when they do not use all available space on the main-axis                                                  (horizontally).
                                          property :-  center, flex-start, flex-end, space-around, space-between, space-evenly.

                 5. aligin-item :- The align-items property is used to align the flex items when they do not use all available space on the cross-axis (vertically).
                                    property :- center, flex-start, flex-end, stretch, baseline, normal

       

                     
                 //*****//
                 Flex item property :- The CSS properties we use for flex items are:

                              here are some ==> order, flex-grow, flex-shrink, flex-basis, flex, align-self.

                                       1. flex-grow :- The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.

                                       2. flex-shrink :- The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex                                                                    items. default value is 1

                                       3. flex-basis :-The flex-basis property specifies the initial length of a flex item.
                                                          <div style="flex-basis:200px">3</div>

                                       4. flex :- The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.
                                                     <div style="flex-basis: 200px">3</div>



   

                 
     


